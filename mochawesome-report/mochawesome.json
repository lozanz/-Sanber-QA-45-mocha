{
  "stats": {
    "suites": 2,
    "tests": 10,
    "passes": 10,
    "pending": 0,
    "failures": 0,
    "start": "2023-06-25T05:13:31.093Z",
    "end": "2023-06-25T05:13:33.602Z",
    "duration": 2509,
    "testsRegistered": 10,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "116ac069-a2b1-42ed-8d3e-fc5772092918",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "660dd8db-7f8b-42b2-bf9d-7d836b577940",
          "title": "CRUD Product Flow",
          "fullFile": "D:\\k5\\Sanber-QA-45\\Tugas\\Sanber-QA-45-mocha\\test\\suite\\crudProductAndCustomer.suite.js",
          "file": "\\test\\suite\\crudProductAndCustomer.suite.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"CRUD Product Flow\"",
              "fullTitle": "CRUD Product Flow \"before all\" hook in \"CRUD Product Flow\"",
              "timedOut": false,
              "duration": 667,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = request(baseUrl)\n  .post(\"/authentications\")\n  .send(jsonPayload.login);\nexpect((await response).status).to.equal(201);\nexpect((await response).body.data.accessToken).not.to.be.null;\ntoken = (await response).body.data.accessToken;",
              "err": {},
              "uuid": "60be18df-7522-4cdf-ae83-9c1da3fcd71e",
              "parentUUID": "660dd8db-7f8b-42b2-bf9d-7d836b577940",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "add new product with valid data",
              "fullTitle": "CRUD Product Flow add new product with valid data",
              "timedOut": false,
              "duration": 131,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = request(baseUrl)\n  .post(\"/products\") \n  .set({\n    Authorization: `Bearer ${token}`,\n  })\n  .send(jsonPayload.addProduct);\n  console.log((await response).statusCode)\nexpect((await response).status).to.equal(201);\nexpect((await response).body.status).to.equal(\"success\");\nexpect((await response).body.data.name).to.equal(jsonPayload.addProduct.name);\nproductName = (await response).body.data.name;",
              "err": {},
              "uuid": "681e2d0e-8d26-4e91-9d6b-97f795465a5f",
              "parentUUID": "660dd8db-7f8b-42b2-bf9d-7d836b577940",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get list of products",
              "fullTitle": "CRUD Product Flow Get list of products",
              "timedOut": false,
              "duration": 228,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = request(baseUrl)\n  .get(\"/products\")\n  .set({\n    Authorization: `Bearer ${token}`,\n  });\n  console.log((await response).statusCode)\nexpect((await response).status).to.equal(200);\nexpect((await response).body.data.products[0].name).to.equal(productName);\nproductId = (await response).body.data.products[0].id;",
              "err": {},
              "uuid": "453da271-cac4-42c9-9977-eb13d23ef208",
              "parentUUID": "660dd8db-7f8b-42b2-bf9d-7d836b577940",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get product detail with valid id",
              "fullTitle": "CRUD Product Flow Get product detail with valid id",
              "timedOut": false,
              "duration": 123,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = request(baseUrl)\n  .get(\"/products/\" + productId)\n  .set({\n    Authorization: `Bearer ${token}`,\n  });\n  console.log((await response).statusCode)\nexpect((await response).status).to.equal(200);\nexpect((await response).body.data.product.name).to.equal(\"taro\");\nexpect((await response).body.data.product.price).to.equal(3500);",
              "err": {},
              "uuid": "d5dddcd0-f4fb-48f8-a553-56e6b35b33f2",
              "parentUUID": "660dd8db-7f8b-42b2-bf9d-7d836b577940",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Update product data with valid data",
              "fullTitle": "CRUD Product Flow Update product data with valid data",
              "timedOut": false,
              "duration": 99,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = request(baseUrl)\n  .put(\"/products/\" + productId)\n  .set({\n    Authorization: `Bearer ${token}`,\n  })\n  .send(jsonPayload.updateProduct);\n  console.log((await response).statusCode)\nexpect((await response).status).to.equal(200);\nexpect((await response).body.status).to.equal(\"success\");\nexpect((await response).body.data.name).to.equal(jsonPayload.updateProduct.name);",
              "err": {},
              "uuid": "19342247-67d9-4d26-a504-9cdc0c17deda",
              "parentUUID": "660dd8db-7f8b-42b2-bf9d-7d836b577940",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Delete product",
              "fullTitle": "CRUD Product Flow Delete product",
              "timedOut": false,
              "duration": 119,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = request(baseUrl)\n  .delete(\"/products/\" + productId)\n  .set({\n    Authorization: `Bearer ${token}`,\n  });\n  console.log((await response).statusCode)\nexpect((await response).status).to.equal(200);\nexpect((await response).body.status).to.equal(\"success\");",
              "err": {},
              "uuid": "595f98fa-2b17-4481-aa73-cb88dac0dbbc",
              "parentUUID": "660dd8db-7f8b-42b2-bf9d-7d836b577940",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "681e2d0e-8d26-4e91-9d6b-97f795465a5f",
            "453da271-cac4-42c9-9977-eb13d23ef208",
            "d5dddcd0-f4fb-48f8-a553-56e6b35b33f2",
            "19342247-67d9-4d26-a504-9cdc0c17deda",
            "595f98fa-2b17-4481-aa73-cb88dac0dbbc"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 700,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "b753ee85-ec75-4395-9ee5-bd8e2a1527bc",
          "title": "CRUD Customer Flow",
          "fullFile": "D:\\k5\\Sanber-QA-45\\Tugas\\Sanber-QA-45-mocha\\test\\suite\\crudProductAndCustomer.suite.js",
          "file": "\\test\\suite\\crudProductAndCustomer.suite.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"CRUD Customer Flow\"",
              "fullTitle": "CRUD Customer Flow \"before all\" hook in \"CRUD Customer Flow\"",
              "timedOut": false,
              "duration": 432,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = request(baseUrl)\n  .post(\"/authentications\")\n  .send(jsonPayload.login);\nexpect((await response).status).to.equal(201);\nexpect((await response).body.data.accessToken).not.to.be.null;\ntoken = (await response).body.data.accessToken;",
              "err": {},
              "uuid": "50b57c1c-4f30-4e62-a38f-c639b482e5ba",
              "parentUUID": "b753ee85-ec75-4395-9ee5-bd8e2a1527bc",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "add new Customer with valid data",
              "fullTitle": "CRUD Customer Flow add new Customer with valid data",
              "timedOut": false,
              "duration": 134,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = request(baseUrl)\n  .post(\"/customers\") \n  .set({\n    Authorization: `Bearer ${token}`,\n  })\n  .send(jsonPayload.addCustomer);\n  console.log((await response).statusCode)\n// console.log((await response).body)\nexpect((await response).status).to.equal(201);\nexpect((await response).body.status).to.equal(\"success\");\nexpect((await response).body.data.name).to.equal(jsonPayload.addCustomer.name);\ncustomerName = (await response).body.data.name;",
              "err": {},
              "uuid": "83d19d3e-8668-4e87-8eb2-593852595f47",
              "parentUUID": "b753ee85-ec75-4395-9ee5-bd8e2a1527bc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get list of Customers",
              "fullTitle": "CRUD Customer Flow Get list of Customers",
              "timedOut": false,
              "duration": 131,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = request(baseUrl)\n  .get(\"/customers\")\n  .set({\n    Authorization: `Bearer ${token}`,\n  });\n  console.log((await response).statusCode)\n//   console.log((await response).text)\nexpect((await response).status).to.equal(200);\nexpect((await response).body.data.customers[0].name).to.equal(customerName);\ncustomerId = (await response).body.data.customers[0].id;",
              "err": {},
              "uuid": "30667ecf-25b6-47ae-8d58-7292d183753b",
              "parentUUID": "b753ee85-ec75-4395-9ee5-bd8e2a1527bc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get Customer detail with valid id",
              "fullTitle": "CRUD Customer Flow Get Customer detail with valid id",
              "timedOut": false,
              "duration": 131,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = request(baseUrl)\n  .get(\"/customers/\" + customerId)\n  .set({\n    Authorization: `Bearer ${token}`,\n  });\n  console.log((await response).statusCode)\nexpect((await response).status).to.equal(200);\nexpect((await response).body.data.customer.name).to.equal(\"Budi\");\nexpect((await response).body.data.customer.address).to.equal(\"Bandoeng\");",
              "err": {},
              "uuid": "8be501f1-b9aa-4610-8c28-feff84fae012",
              "parentUUID": "b753ee85-ec75-4395-9ee5-bd8e2a1527bc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Update Customer data with valid data",
              "fullTitle": "CRUD Customer Flow Update Customer data with valid data",
              "timedOut": false,
              "duration": 139,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = request(baseUrl)\n  .put(\"/customers/\" + customerId)\n  .set({\n    Authorization: `Bearer ${token}`,\n  })\n  .send(jsonPayload.updateCustomer);\n  console.log((await response).statusCode)\nexpect((await response).status).to.equal(200);\nexpect((await response).body.status).to.equal(\"success\");\nexpect((await response).body.data.name).to.equal(jsonPayload.updateCustomer.name);",
              "err": {},
              "uuid": "bf778cec-9568-4141-b416-c665b84d0ccf",
              "parentUUID": "b753ee85-ec75-4395-9ee5-bd8e2a1527bc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Delete Customer",
              "fullTitle": "CRUD Customer Flow Delete Customer",
              "timedOut": false,
              "duration": 120,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = request(baseUrl)\n  .delete(\"/customers/\" + customerId)\n  .set({\n    Authorization: `Bearer ${token}`,\n  });\n  console.log((await response).statusCode)\nexpect((await response).status).to.equal(200);\nexpect((await response).body.status).to.equal(\"success\");",
              "err": {},
              "uuid": "d8ed6e97-bb80-4e4c-81ae-37c72651e456",
              "parentUUID": "b753ee85-ec75-4395-9ee5-bd8e2a1527bc",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "83d19d3e-8668-4e87-8eb2-593852595f47",
            "30667ecf-25b6-47ae-8d58-7292d183753b",
            "8be501f1-b9aa-4610-8c28-feff84fae012",
            "bf778cec-9568-4141-b416-c665b84d0ccf",
            "d8ed6e97-bb80-4e4c-81ae-37c72651e456"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 655,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}