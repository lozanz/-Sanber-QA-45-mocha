{
  "stats": {
    "suites": 2,
    "tests": 10,
    "passes": 10,
    "pending": 0,
    "failures": 0,
    "start": "2023-06-25T04:42:22.948Z",
    "end": "2023-06-25T04:42:28.915Z",
    "duration": 5967,
    "testsRegistered": 10,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "b0b58cac-fb86-4e86-b68e-34da10afa218",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "4dda353b-9752-4dba-839b-9c24983cb426",
          "title": "CRUD Product Flow",
          "fullFile": "D:\\k5\\Sanber-QA-45\\Tugas\\Sanber-QA-45-mocha\\test\\suite\\crudProductAndCustomer.suite.js",
          "file": "\\test\\suite\\crudProductAndCustomer.suite.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"CRUD Product Flow\"",
              "fullTitle": "CRUD Product Flow \"before all\" hook in \"CRUD Product Flow\"",
              "timedOut": false,
              "duration": 650,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = request(baseUrl)\n  .post(\"/authentications\")\n  .send(jsonPayload.login);\nexpect((await response).status).to.equal(201);\nexpect((await response).body.data.accessToken).not.to.be.null;\ntoken = (await response).body.data.accessToken;",
              "err": {},
              "uuid": "ff535ad3-e67f-463b-8fad-21a7e973d315",
              "parentUUID": "4dda353b-9752-4dba-839b-9c24983cb426",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "add new product with valid data",
              "fullTitle": "CRUD Product Flow add new product with valid data",
              "timedOut": false,
              "duration": 151,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = request(baseUrl)\n  .post(\"/products\") \n  .set({\n    Authorization: `Bearer ${token}`,\n  })\n  .send(jsonPayload.addProduct);\n  console.log((await response).statusCode)\nexpect((await response).status).to.equal(201);\nexpect((await response).body.status).to.equal(\"success\");\nexpect((await response).body.data.name).to.equal(jsonPayload.addProduct.name);\nproductName = (await response).body.data.name;",
              "err": {},
              "uuid": "214830d8-a005-4be3-bd8f-84ae58688d46",
              "parentUUID": "4dda353b-9752-4dba-839b-9c24983cb426",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get list of products",
              "fullTitle": "CRUD Product Flow Get list of products",
              "timedOut": false,
              "duration": 161,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = request(baseUrl)\n  .get(\"/products\")\n  .set({\n    Authorization: `Bearer ${token}`,\n  });\n  console.log((await response).statusCode)\nexpect((await response).status).to.equal(200);\nexpect((await response).body.data.products[0].name).to.equal(productName);\nproductId = (await response).body.data.products[0].id;",
              "err": {},
              "uuid": "449d929f-e05d-4c22-a8b6-81386aa1383e",
              "parentUUID": "4dda353b-9752-4dba-839b-9c24983cb426",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get product detail with valid id",
              "fullTitle": "CRUD Product Flow Get product detail with valid id",
              "timedOut": false,
              "duration": 567,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = request(baseUrl)\n  .get(\"/products/\" + productId)\n  .set({\n    Authorization: `Bearer ${token}`,\n  });\n  console.log((await response).statusCode)\nexpect((await response).status).to.equal(200);\nexpect((await response).body.data.product.name).to.equal(\"taro\");\nexpect((await response).body.data.product.price).to.equal(3500);",
              "err": {},
              "uuid": "e028443a-1d1c-4757-b9ab-f626b4efac42",
              "parentUUID": "4dda353b-9752-4dba-839b-9c24983cb426",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Update product data with valid data",
              "fullTitle": "CRUD Product Flow Update product data with valid data",
              "timedOut": false,
              "duration": 133,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = request(baseUrl)\n  .put(\"/products/\" + productId)\n  .set({\n    Authorization: `Bearer ${token}`,\n  })\n  .send(jsonPayload.updateProduct);\n  console.log((await response).statusCode)\nexpect((await response).status).to.equal(200);\nexpect((await response).body.status).to.equal(\"success\");\nexpect((await response).body.data.name).to.equal(jsonPayload.updateProduct.name);",
              "err": {},
              "uuid": "ac13b9b6-5f59-47b1-a2ca-b1f921170d92",
              "parentUUID": "4dda353b-9752-4dba-839b-9c24983cb426",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Delete product",
              "fullTitle": "CRUD Product Flow Delete product",
              "timedOut": false,
              "duration": 1151,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = request(baseUrl)\n  .delete(\"/products/\" + productId)\n  .set({\n    Authorization: `Bearer ${token}`,\n  });\n  console.log((await response).statusCode)\nexpect((await response).status).to.equal(200);\nexpect((await response).body.status).to.equal(\"success\");",
              "err": {},
              "uuid": "b4fc3bbc-4742-4c42-990b-553af4fbd7f3",
              "parentUUID": "4dda353b-9752-4dba-839b-9c24983cb426",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "214830d8-a005-4be3-bd8f-84ae58688d46",
            "449d929f-e05d-4c22-a8b6-81386aa1383e",
            "e028443a-1d1c-4757-b9ab-f626b4efac42",
            "ac13b9b6-5f59-47b1-a2ca-b1f921170d92",
            "b4fc3bbc-4742-4c42-990b-553af4fbd7f3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2163,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "2583427f-65fa-4429-aee1-9a915c03a7eb",
          "title": "CRUD Customer Flow",
          "fullFile": "D:\\k5\\Sanber-QA-45\\Tugas\\Sanber-QA-45-mocha\\test\\suite\\crudProductAndCustomer.suite.js",
          "file": "\\test\\suite\\crudProductAndCustomer.suite.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"CRUD Customer Flow\"",
              "fullTitle": "CRUD Customer Flow \"before all\" hook in \"CRUD Customer Flow\"",
              "timedOut": false,
              "duration": 432,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = request(baseUrl)\n  .post(\"/authentications\")\n  .send(jsonPayload.login);\nexpect((await response).status).to.equal(201);\nexpect((await response).body.data.accessToken).not.to.be.null;\ntoken = (await response).body.data.accessToken;",
              "err": {},
              "uuid": "20b89554-1cc5-4477-9785-01d934e42b14",
              "parentUUID": "2583427f-65fa-4429-aee1-9a915c03a7eb",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "add new Customer with valid data",
              "fullTitle": "CRUD Customer Flow add new Customer with valid data",
              "timedOut": false,
              "duration": 319,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = request(baseUrl)\n  .post(\"/customers\") \n  .set({\n    Authorization: `Bearer ${token}`,\n  })\n  .send(jsonPayload.addCustomer);\n  console.log((await response).statusCode)\n// console.log((await response).body)\nexpect((await response).status).to.equal(201);\nexpect((await response).body.status).to.equal(\"success\");\nexpect((await response).body.data.name).to.equal(jsonPayload.addCustomer.name);\ncustomerName = (await response).body.data.name;",
              "err": {},
              "uuid": "f0f2e83b-0676-49a9-a455-dc0e5b7552e2",
              "parentUUID": "2583427f-65fa-4429-aee1-9a915c03a7eb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get list of Customers",
              "fullTitle": "CRUD Customer Flow Get list of Customers",
              "timedOut": false,
              "duration": 225,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = request(baseUrl)\n  .get(\"/customers\")\n  .set({\n    Authorization: `Bearer ${token}`,\n  });\n  console.log((await response).statusCode)\n//   console.log((await response).text)\nexpect((await response).status).to.equal(200);\nexpect((await response).body.data.customers[0].name).to.equal(customerName);\ncustomerId = (await response).body.data.customers[0].id;",
              "err": {},
              "uuid": "cea2361b-8ca5-4164-9768-e730ec1e866b",
              "parentUUID": "2583427f-65fa-4429-aee1-9a915c03a7eb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get Customer detail with valid id",
              "fullTitle": "CRUD Customer Flow Get Customer detail with valid id",
              "timedOut": false,
              "duration": 264,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = request(baseUrl)\n  .get(\"/customers/\" + customerId)\n  .set({\n    Authorization: `Bearer ${token}`,\n  });\n  console.log((await response).statusCode)\nexpect((await response).status).to.equal(200);\nexpect((await response).body.data.customer.name).to.equal(\"Budi\");\nexpect((await response).body.data.customer.address).to.equal(\"Bandoeng\");",
              "err": {},
              "uuid": "bbf3d0cd-1254-4f97-a8a7-c3597cfa6c6b",
              "parentUUID": "2583427f-65fa-4429-aee1-9a915c03a7eb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Update Customer data with valid data",
              "fullTitle": "CRUD Customer Flow Update Customer data with valid data",
              "timedOut": false,
              "duration": 322,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = request(baseUrl)\n  .put(\"/customers/\" + customerId)\n  .set({\n    Authorization: `Bearer ${token}`,\n  })\n  .send(jsonPayload.updateCustomer);\n  console.log((await response).statusCode)\nexpect((await response).status).to.equal(200);\nexpect((await response).body.status).to.equal(\"success\");\nexpect((await response).body.data.name).to.equal(jsonPayload.updateCustomer.name);",
              "err": {},
              "uuid": "2a691696-c27b-4f98-a386-da2b751bec8f",
              "parentUUID": "2583427f-65fa-4429-aee1-9a915c03a7eb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Delete Customer",
              "fullTitle": "CRUD Customer Flow Delete Customer",
              "timedOut": false,
              "duration": 1521,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = request(baseUrl)\n  .delete(\"/customers/\" + customerId)\n  .set({\n    Authorization: `Bearer ${token}`,\n  });\n  console.log((await response).statusCode)\nexpect((await response).status).to.equal(200);\nexpect((await response).body.status).to.equal(\"success\");",
              "err": {},
              "uuid": "602bba21-97e2-4ac8-aaec-352508a1022b",
              "parentUUID": "2583427f-65fa-4429-aee1-9a915c03a7eb",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f0f2e83b-0676-49a9-a455-dc0e5b7552e2",
            "cea2361b-8ca5-4164-9768-e730ec1e866b",
            "bbf3d0cd-1254-4f97-a8a7-c3597cfa6c6b",
            "2a691696-c27b-4f98-a386-da2b751bec8f",
            "602bba21-97e2-4ac8-aaec-352508a1022b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2651,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}